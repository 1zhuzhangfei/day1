
//1. 请定义一个正则表达式，可以从包含16进制颜色值字符串中提取出合法的颜色值。
//var string = "#ffbbad #Fc01DF #FFF #ffE"; 
// => ["#ffbbad", "#Fc01DF", "#FFF", "#ffE"]

var string = "#ffbbad #Fc01DF #FFF #ffE";
var s1 = /#[A-Fa-f0-9]{6}|#[A-Fa-f0-9]{3}/g;

console.log(string.match(s1));



/*
2. 请定义一个正则表达式，可以从包含24小时制时间字符串中提取出合法的时间。
var string = "12:34 08:30 23:59 30:88"; 
=> ['12:34', '08:30', '23:59']
*/

var string2 = "12:34 08:30 23:59 30:88"; 
var s2 = /[01]\d:[0-5]\d|(2[0-3]:[0-5]\d)/g;

console.log(string2.match(s2));


var h1 = "<div>123</div>789<h1>456</h1>";

var t2 = />\d+</g;

console.log(h1.replace(/<[^<>]+>/g,","));

console.log(h1.match(t2));


//\n出现在字符串中表示换行
//m修饰符表示开启行匹配


//开头和结尾位置理解成空字符串


var h2 = "12345678900000";
var t3 = /(?=(\d{3})+$)/g;

console.log(h2.replace(t3,","));

//1.编写一个正则表达式，匹配一个格式正确的IPv4地址。
//192.168.10.10
var ipv4 = "192.168.10.10";
var ipv5 = "256.168.10.10,121";
var test1 = /^([2][5][0-5]|[2][0-4][0-9]|[1][0-9][0-9]|[1-9][0-9]|[0-9]).([2][5][0-5]|[2][0-4][0-9]|[1][0-9][0-9]|[1-9][0-9]|[0-9]).([2][5][0-5]|[2][0-4][0-9]|[1][0-9][0-9]|[1-9][0-9]|[0-9])$)./g;
console.log(ipv4.match(test1));
console.log(ipv5.match(test1));
//524545454
//2.编写一个正则表达式，匹配一个格式正确的日期（年份为四位数，月份和日期为两位数）。

//3.编写一个正则表达式，验证一个密码是否符合要求（至少8个字符，包含至少一个大写字母、一个小写字母和一个数字）。

//4.编写一个正则表达式，验证一个密码是否符合要求（8-14个字符，由大写字母、小写字母和数字组成，至少包含其中两种）。